
#run cutadapt, detect and trim my custom landing pads
cutadapt -a TTGGTGCTGATATTGC...GAAGATAGAGCGACAG -a CTGTCGCTCTATCTTC...GCAATATCAGCACCAA -o subset_landing_pad.fastq subset.fastq --discard-untrimmed

#with checking reverse complement reads insteadd of putting -a twice
#I checked and they find the same number of instances of th adapters
#also changed file names
  #THIS ONE#########################33
cutadapt -a TTGGTGCTGATATTGC...GAAGATAGAGCGACAG -O 10 --discard-untrimmed --revcomp -o all_reads_custom_landing_pads_trimmed.fastq FBC73506_fastq_pass_d5fa85e0_b727e37a_0.fastq > all_reads_custom_landing_pads_trimmed.txt

### OUTPUT: 
#   Done           00:13:51    20,226,344 reads @  41.1 Âµs/read;   1.46 M reads/minute

  
#check if adapter is founf midstrand: 
cutadapt -a TTGGTGCTGATATTGC --rest-file rest_chimeras.fastq --discard-untrimmed --revcomp -o subset_landing_pad.fastq subset.fastq > rest_revcomp_subset_landing_pad.txt
head bi

#cutadapt cross
#cutadapt -g file:cross_barcodes.fasta --revcomp --rest-file cross_chimeras.fastq -o crossALL_landing-pad-rc_subset.fastq --discard-untrimmed landing-pad-rc_subset.fastq > crossALL_landing-pad-rc_subset.txt

#okay now get sep files: 

segment_array=("S" "M" "L")

#search for the cross, plaque, and segment info with cutadapt in loops. I think its worth noting that the loop searches with replacement. ie, reads can be classified multiple times

  #THIS ONE
  for cross_barcode_seq in $(grep -v "^>" "cross_barcodes.fasta" ); do
      
    #get line in barcodes fasta with cross sequence
    cross_seq_line=$(sed -n "/${cross_barcode_seq}/=" cross_barcodes.fasta);        
    #get line in barcodes fasta with fasta name
    cross_header_line=$((cross_seq_line -1)); 
    cross_header=$(sed -n "${cross_header_line}p" cross_barcodes.fasta);
    cross_header=${cross_header#*>};
    echo "cross = ${cross_header}";  
    #O=14; tot len =18 (75%)
    cutadapt -a ${cross_barcode_seq} -O 14 --revcomp --discard-untrimmed --rest-file ${cross_header}_chimeras.fastq -o ${cross_header}_reads.fastq all_reads_custom_landing_pads_trimmed.fastq > ${cross_header}_reads.txt;

      for plaque_barcode_seq in $(grep -v "^>" "plaque_barcodes.fasta" ); do
        
      #get line in barcodes fasta with plaque sequence
      plaque_seq_line=$(sed -n "/${plaque_barcode_seq}/=" plaque_barcodes.fasta);        
      #get line in barcodes fasta with fasta name
      plaque_header_line=$((plaque_seq_line -1)); 
      plaque_header=$(sed -n "${plaque_header_line}p" plaque_barcodes.fasta);
      plaque_header=${plaque_header#*>};
        
      plaque_num="${plaque_header#*plaque}";
      cross_num="${cross_header#*cross}";
      echo "plaque = ${plaque_header}";  

      mkdir barcode${cross_num}${plaque_num};

      #O=18, tot length = 24 (75%)
      cutadapt -g ${plaque_barcode_seq} -O 14 --no-indels --revcomp --discard-untrimmed -o barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.fastq  ${cross_header}_reads.fastq > barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.txt;

    

     # for segment in "${segment_array[@]}"; do

        #S O= 15, (75%)
        cutadapt -a CTTTCGTACAACCGAGTAGG...CTCCTGAAGTATCTCACGCC -O 15 --revcomp --discard-untrimmed -o barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_S_reads.fastq barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.fastq > barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_S_reads.txt;

        #M O= 13, (75% of the sorter one)
        cutadapt -a CGCTACGGCGGTATTGTC...GCTCACCAAGTAAGGTGTAGTAT -O 13 --revcomp --discard-untrimmed -o barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_M_reads.fastq barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.fastq > barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_M_reads.txt;

        #L O=12 (75% of the sorter one)
        cutadapt -a TCGATGTTCAACTACTACGC...GCGAGACTCGCTTTGC -O 12 --revcomp --discard-untrimmed -o barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_L_reads.fastq barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.fastq > barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_L_reads.txt;    
    done
done




#plaques: 
 for plaque_barcode_seq in $(grep -v "^>" "plaque_barcodes.fasta" ); do
      
    #get line in barcodes fasta with plaque sequence
    plaque_seq_line=$(sed -n "/${plaque_barcode_seq}/=" plaque_barcodes.fasta);        
    #get line in barcodes fasta with fasta name
    plaque_header_line=$((plaque_seq_line -1)); 
    plaque_header=$(sed -n "${plaque_header_line}p" plaque_barcodes.fasta);
    plaque_header=${plaque_header#*>};
    echo "plaque = ${plaque_header}";    
    cutadapt -g ${plaque_barcode_seq} -O 14 --no-indels --revcomp --rest-file ${plaque_header}_chimeras.fastq -o ${plaque_header}_landing-pad-rc_subset.fastq --discard-untrimmed big_landing-pad-rc_subset.fastq > ${plaque_header}_landing-pad-rc_subset.txt;
  done
      


c


################## ADD LENGTH FILTERING #######################################3333
 #THIS ONE
  for cross_barcode_seq in $(grep -v "^>" "cross_barcodes.fasta" ); do
      
    #get line in barcodes fasta with cross sequence
    cross_seq_line=$(sed -n "/${cross_barcode_seq}/=" cross_barcodes.fasta);        
    #get line in barcodes fasta with fasta name
    cross_header_line=$((cross_seq_line -1)); 
    cross_header=$(sed -n "${cross_header_line}p" cross_barcodes.fasta);
    cross_header=${cross_header#*>};
    echo "cross = ${cross_header}";  
    #O=14; tot len =18 (75%)
    #cutadapt -a ${cross_barcode_seq} -O 14 --revcomp --discard-untrimmed --rest-file ${cross_header}_chimeras.fastq -o ${cross_header}_reads.fastq all_reads_custom_landing_pads_trimmed.fastq > ${cross_header}_reads.txt;

      for plaque_barcode_seq in $(grep -v "^>" "plaque_barcodes.fasta" ); do
        
      #get line in barcodes fasta with plaque sequence
      plaque_seq_line=$(sed -n "/${plaque_barcode_seq}/=" plaque_barcodes.fasta);        
      #get line in barcodes fasta with fasta name
      plaque_header_line=$((plaque_seq_line -1)); 
      plaque_header=$(sed -n "${plaque_header_line}p" plaque_barcodes.fasta);
      plaque_header=${plaque_header#*>};
        
      plaque_num="${plaque_header#*plaque}";
      cross_num="${cross_header#*cross}";
      echo "plaque = ${plaque_header}";  

      #mkdir barcode${cross_num}${plaque_num};

      #O=18, tot length = 24 (75%)
      #cutadapt -g ${plaque_barcode_seq} -O 14 --no-indels --revcomp --discard-untrimmed -o barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.fastq  ${cross_header}_reads.fastq > barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.txt;

    

     # for segment in "${segment_array[@]}"; do

        #S O= 15, (75%)
        # S amplicon length = 621, filter reads shorter than 120 bp and longer than 850 bp
        cutadapt -a CTTTCGTACAACCGAGTAGG...CTCCTGAAGTATCTCACGCC -O 15 --revcomp --discard-untrimmed -m 120 --too-short-output barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_S_reads_filt_tooshort.fastq -M 850 --too-short-output barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_S_reads_filt_toolong.fastq -o barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_S_reads_filt.fastq barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.fastq > barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_S_reads_filt.txt;

        #M O= 13, (75% of the sorter one)
        # M amplicon length = 443, filter reads shorter than 100 bp and longer than 670 bp
        cutadapt -a CGCTACGGCGGTATTGTC...GCTCACCAAGTAAGGTGTAGTAT -O 13 --revcomp --discard-untrimmed -m 100 --too-short-output barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_M_reads_filt_tooshort.fastq -M 670 --too-short-output barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_M_reads_filt_toolong.fastq -o barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_M_reads_filt.fastq barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.fastq > barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_M_reads_filt.txt;

        #L O=12 (75% of the sorter one)
        # L amplicon length = 941, filter reads shorter than 200 bp and longer than 1200 bp
        cutadapt -a TCGATGTTCAACTACTACGC...GCGAGACTCGCTTTGC -O 12 --revcomp --discard-untrimmed -m 200 --too-short-output barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_L_reads_filt_tooshort.fastq -M 1200 --too-short-output barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_L_reads_filt_toolong.fastq  -o barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_L_reads_filt.fastq barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.fastq > barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_L_reads_filt.txt;    
    done
done















#cuutadapt plaque
  cutadapt -a file:plaque_barcodes.fasta --revcomp --rest-file plaquel_chimeras.fastq -o cross_landing-pad-rc_subset.fastq --discard-untrimmed landing-pad-rc_subset.fastq > cross_landing-pad-rc_subset.txt




#once filtered, cutadapt and




#actual line to run genotyping and usearch
bash genotyping_new.sh -d /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt -e /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/sample_list2.csv -c /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/cross_list.txt -s /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/refs/ref_phi6_S_04.fasta -m /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/refs/ref_phi6_M_01.fasta -l /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/refs/ref_phi6_L_89.fasta |& tee genotyping_usearch_rerun.out


0.15 ERROR!!!!! #actual line to run genotyping and usearch
bash genotyping_new.sh -d /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/error0.15 -e /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/error0.15/sample_list2.csv -c /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/error0.15/cross_list.txt -s /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/error0.15/refs/ref_phi6_S_04.fasta -m /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/error0.15/refs/ref_phi6_M_01.fasta -l /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/error0.15/refs/ref_phi6_L_89.fasta |& tee genotyping_usearch_error0.15.out




for bsix in 









srun -c 2 -t 20:00:00 --mem=30000 --partition=low --pty /bin/bash
module load conda
conda activate cutadapt




#higher error

  #THIS ONE#########################33
cutadapt -a TTGGTGCTGATATTGC...GAAGATAGAGCGACAG -e 0.15 -O 10 --discard-untrimmed --revcomp -o all_reads_custom_landing_pads_trimmed_error0.15.fastq FBC73506_fastq_pass_d5fa85e0_b727e37a_0.fastq > all_reads_custom_landing_pads_trimmed_error0.15.txt



#THIS ONE
  for cross_barcode_seq in $(grep -v "^>" "cross_barcodes.fasta" ); do
      
    #get line in barcodes fasta with cross sequence
    cross_seq_line=$(sed -n "/${cross_barcode_seq}/=" cross_barcodes.fasta);        
    #get line in barcodes fasta with fasta name
    cross_header_line=$((cross_seq_line -1)); 
    cross_header=$(sed -n "${cross_header_line}p" cross_barcodes.fasta);
    cross_header=${cross_header#*>};
    echo "cross = ${cross_header}";  
    #O=14; tot len =18 (75%)
    cutadapt -a ${cross_barcode_seq} -O 14 --no-indels -e 0.15 --revcomp --discard-untrimmed --rest-file ${cross_header}_chimeras.fastq -o ${cross_header}_reads.fastq all_reads_custom_landing_pads_trimmed_error0.15.fastq > ${cross_header}_reads.txt;

      for plaque_barcode_seq in $(grep -v "^>" "plaque_barcodes.fasta" ); do
        
      #get line in barcodes fasta with plaque sequence
      plaque_seq_line=$(sed -n "/${plaque_barcode_seq}/=" plaque_barcodes.fasta);        
      #get line in barcodes fasta with fasta name
      plaque_header_line=$((plaque_seq_line -1)); 
      plaque_header=$(sed -n "${plaque_header_line}p" plaque_barcodes.fasta);
      plaque_header=${plaque_header#*>};
        
      plaque_num="${plaque_header#*plaque}";
      cross_num="${cross_header#*cross}";
      echo "plaque = ${plaque_header}";  

      mkdir barcode${cross_num}${plaque_num};

      #O=18, tot length = 24 (75%)
      cutadapt -g ${plaque_barcode_seq} -O 14 -e 0.15 --no-indels --revcomp --discard-untrimmed -o barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.fastq  ${cross_header}_reads.fastq > barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.txt;

    

     # for segment in "${segment_array[@]}"; do

        #S O= 15, (75%)
        # S amplicon length = 621, filter reads shorter than 120 bp and longer than 850 bp
        cutadapt -a CTTTCGTACAACCGAGTAGG...CTCCTGAAGTATCTCACGCC -e 0.15 -O 15 --no-indels --revcomp --discard-untrimmed -m 120 --too-short-output barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_S_reads_filt_tooshort.fastq -M 850 --too-short-output barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_S_reads_filt_toolong.fastq -o barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_S_reads_filt.fastq barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.fastq > barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_S_reads_filt.txt;

        #M O= 13, (75% of the sorter one)
        # M amplicon length = 443, filter reads shorter than 100 bp and longer than 670 bp
        cutadapt -a CGCTACGGCGGTATTGTC...GCTCACCAAGTAAGGTGTAGTAT -e 0.15 -O 13 --no-indels --revcomp --discard-untrimmed -m 100 --too-short-output barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_M_reads_filt_tooshort.fastq -M 670 --too-short-output barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_M_reads_filt_toolong.fastq -o barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_M_reads_filt.fastq barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.fastq > barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_M_reads_filt.txt;

        #L O=12 (75% of the sorter one)
        # L amplicon length = 941, filter reads shorter than 200 bp and longer than 1200 bp
        cutadapt -a TCGATGTTCAACTACTACGC...GCGAGACTCGCTTTGC -e 0.15 -O 12 --no-indels --revcomp --discard-untrimmed -m 200 --too-short-output barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_L_reads_filt_tooshort.fastq -M 1200 --too-short-output barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_L_reads_filt_toolong.fastq  -o barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_L_reads_filt.fastq barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_reads.fastq > barcode${cross_num}${plaque_num}/barcode${cross_num}${plaque_num}_L_reads_filt.txt;    
    done
done






Go back and usearch parents for new data:

bash genotyping_with_parents.sh -d /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/error0.15 -e /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/error0.15/sample_list2_parents.csv -c /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/error0.15/cross_list_p.txt -s /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/error0.15/refs/ref_phi6_S_04.fasta -m /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/error0.15/refs/ref_phi6_M_01.fasta -l /group/sldmunozgrp/cysto_LMGSeq08-25/cutadapt/error0.15/refs/ref_phi6_L_89.fasta |& tee genotyping_usearch_error0.15.out


old data: 

bash genotyping_with_parents.sh -d /group/sldmunozgrp/cysto_coinf_CA68x426427 -e /group/sldmunozgrp/cysto_coinf_CA68x426427/sample_list2_parents.csv -c /group/sldmunozgrp/cysto_coinf_CA68x426427/cross_list_p.txt -s /group/sldmunozgrp/cysto_coinf_CA68x426427/refs/ref_phi6_S_48.fasta -m /group/sldmunozgrp/cysto_coinf_CA68x426427/refs/ref_phi6_M_45.fasta -l /group/sldmunozgrp/cysto_coinf_CA68x426427/refs/ref_phi6_L_89.fasta |& tee genotyping_usearch_with parents.out







#starting over, 9/10/2025


#lets actually look for the ONT adaptyers weith cutadapt


cutadapt -a TTTTTTTTCCTGTACTTCGTTCAGTTACGTATTGCT -a GCAATACGTAACTGAACGAAGTACAGG --revcomp -o subset_adapter_tests.fastq big_subset.fastq --action=lowercase --untrimmed-output=untrimmed.fastq > running_log.txt
####
Total reads processed:                 100,000
Reads with adapters:                    69,499 (69.5%)
Reverse-complemented:                   45,778 (45.8%)

== Read fate breakdown ==
Reads discarded as untrimmed:           30,501 (30.5%)
Reads written (passing filters):        69,499 (69.5%)

Total basepairs processed:    88,277,155 bp
Total written (filtered):     62,753,566 bp (71.1%)
#####
#ok the adapters seem to be at the ends...? I'm confused, -a is supposed to be for 5' adapters
# later update: oh ok i see now there is a typo on the cutadapt site >:( - -g is actually for 5'


#switch to -g, just to see
cutadapt -g TTTTTTTTCCTGTACTTCGTTCAGTTACGTATTGCT -g GCAATACGTAACTGAACGAAGTACAGG --revcomp -o subset_adapter_tests.fastq big_subset.fastq --action=lowercase --untrimmed-output=untrimmed.fastq > running_log.txt

####
Total reads processed:                 100,000
Reads with adapters:                    66,690 (66.7%)
Reverse-complemented:                   44,606 (44.6%)

== Read fate breakdown ==
Reads discarded as untrimmed:           33,310 (33.3%)
Reads written (passing filters):        66,690 (66.7%)

Total basepairs processed:    88,277,155 bp
Total written (filtered):     61,577,490 bp (69.8%)
#####
#weirdly similar? lots of the reads appear to be ALL adapter... 
#lets do both:


cutadapt -g TTTTTTTTCCTGTACTTCGTTCAGTTACGTATTGCT -g GCAATACGTAACTGAACGAAGTACAGG -a TTTTTTTTCCTGTACTTCGTTCAGTTACGTATTGCT -a GCAATACGTAACTGAACGAAGTACAGG --revcomp -o subset_adapter_tests.fastq big_subset.fastq --action=lowercase --untrimmed-output=untrimmed.fastq > running_log.txt

#meh ok thats barely higher:

######
Total reads processed:                 100,000
Reads with adapters:                    71,879 (71.9%)
Reverse-complemented:                   45,027 (45.0%)

== Read fate breakdown ==
Reads discarded as untrimmed:           28,121 (28.1%)
Reads written (passing filters):        71,879 (71.9%)

Total basepairs processed:    88,277,155 bp
Total written (filtered):     64,772,461 bp (73.4%)
######

## e=0.15:

cutadapt -g TTTTTTTTCCTGTACTTCGTTCAGTTACGTATTGCT -g GCAATACGTAACTGAACGAAGTACAGG -a TTTTTTTTCCTGTACTTCGTTCAGTTACGTATTGCT -a GCAATACGTAACTGAACGAAGTACAGG --revcomp -e 0.15 -o subset_both_adapter_tests.fastq big_subset.fastq --action=lowercase --untrimmed-output=ont-adapters_untrimmed.fastq > running_log.txt

#### significant increase in reads haivng the adapter?
####
Total reads processed:                 100,000
Reads with adapters:                    88,487 (88.5%)
Reverse-complemented:                   44,912 (44.9%)

== Read fate breakdown ==
Reads discarded as untrimmed:           11,513 (11.5%)
Reads written (passing filters):        88,487 (88.5%)

Total basepairs processed:    88,277,155 bp
Total written (filtered):     79,248,723 bp (89.8%)
#####

#### realized i can do the same thing (search both ends) with -b instead




#ok lets just try thr landing pads again 

cutadapt -a TTGGTGCTGATATTGC -g GAAGATAGAGCGACAG -O 6 --revcomp -o subset_landpad_tests.fastq big_subset.fastq --action=lowercase --untrimmed-output=untrimmed.fastq > running_log.txt

##############
Total reads processed:                 100,000
Reads with adapters:                    81,833 (81.8%)
Reverse-complemented:                   46,709 (46.7%)

== Read fate breakdown ==
Reads discarded as untrimmed:           18,167 (18.2%)
Reads written (passing filters):        81,833 (81.8%)

Total basepairs processed:    88,277,155 bp
Total written (filtered):     77,671,585 bp (88.0%)
#######################


#what if i search on the output of the adapter search?

cutadapt -a TTGGTGCTGATATTGC -g GAAGATAGAGCGACAG -O 6 --revcomp -o subset_landpad_tests.fastq subset_both_adapter_tests.fastq --action=lowercase --untrimmed-output=untrimmed.fastq > running_log.txt

#not as high a % as I would have guessed 

Total reads processed:                  88,487
Reads with adapters:                    74,711 (84.4%)
Reverse-complemented:                   31,260 (35.3%)

== Read fate breakdown ==
Reads discarded as untrimmed:           13,776 (15.6%)
Reads written (passing filters):        74,711 (84.4%)

Total basepairs processed:    79,248,723 bp
Total written (filtered):     70,845,786 bp (89.4%)

#okay maybe actually need to search on  TRIMMED adapter search results (take off previous actio =lowercase) 












#lets try looking for mid-strand adapters with porechop

porechop -i cutadapt/big_subset.fastq --verbosity 2 --extra_end_trim 0 --end_size 40 --min_split_read_size 1 --extra_middle_trim_good_side 0 --extra_middle_trim_bad_side 0 --min_trim_size 8 -o porechop/split_subset_reads.fastq 


grep "adapters" recompile_rerun_new_adapters.txt

#Trimming adapters from read ends
# 83,335 / 100,000 reads had adapters trimmed from their start (2,760,017 bp removed)
# 26,147 / 100,000 reads had adapters trimmed from their end (256,528 bp removed)
# Splitting reads containing middle adapters
# 3,320 / 100,000 reads were split based on middle adapters


#that doesnt add up to 100,000, its actually around 109K, so some reads have 2 adapters. not sure what % of reads have none.
#also looks like only around 3% had middle adapters
#visually, it looks like ~17/170 or 10% dont have an adapter identified at either end

#rerun with higher error allowed

porechop -i cutadapt/big_subset.fastq --verbosity 2 --end_threshold 60 --middle_threshold 80 --extra_end_trim 0 --end_size 40 --min_split_read_size 1 --extra_middle_trim_good_side 0 --extra_middle_trim_bad_side 0 --min_trim_size 8 -o porechop/split_adapters-only_subset_reads.fastq  > 


Looking for known adapter sets
Trimming adapters from read ends
 92,331 / 100,000 reads had adapters trimmed from their start (3,038,744 bp removed)
 37,368 / 100,000 reads had adapters trimmed from their end (503,233 bp removed)
Splitting reads containing middle adapters
6,288 / 100,000 reads were split based on middle adapters








ONT duplex bascalling attempt:

~/dorado/bin/dorado duplex -r --device cuda:all --threads 20 --emit-fastq -o duplex_sup_basecall sup pod5
#jus kidding it gives a warning that fastq output not recommended so ill take that off and allow the default. its unclear which is recommended












